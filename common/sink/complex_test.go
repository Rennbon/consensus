package sink_test

import (
	"math/big"
	"testing"

	"bytes"

	"github.com/rennbon/consensus/common/sink"
	"github.com/stretchr/testify/assert"
)

func TestBigIntToComplex(t *testing.T) {
	a1, _ := big.NewInt(0).SetString("213000000001230000000000000022222222222", 10)
	cp, err := sink.BigIntToComplex(a1)
	if err != nil {
		t.Error(err)
		t.Fail()
		return
	}

	a2, err := cp.ComplexToBigInt()
	if err != nil {
		t.Error(err)
		t.Fail()
		return
	}
	assert.Equal(t, a1, a2)
}

func TestBytesToComplex(t *testing.T) {
	buff := bytes.NewBuffer(nil)
	buff.WriteString("hello world")
	bytes := buff.Bytes()
	cp, err := sink.BytesToComplex(bytes)
	if err != nil {
		t.Error(err)
		t.Fail()
		return
	}
	txa, err := cp.ComplexToBytes()
	if err != nil {
		t.Error(err)
		t.Fail()
		return
	}
	assert.Equal(t, txa, bytes)
}

func TestUintptr(t *testing.T) {
	a, _ := big.NewInt(0).SetString
	t.Log(a.BitLen())
	t.Log(len(a.Bytes()))

}
func TestUint16Check(t *testing.T) {
	uint16Max := ^uint16(0)
	t.Log(int(uint16Max))
	t.Log(^uint16(0))

}
